---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '../components/FormattedDate.astro';
import Tag from '../components/Tag.astro';
import type { MarkdownHeading } from 'astro';
import { Image } from 'astro:assets';
import MainLayout from './MainLayout.astro';
import SectionContainer from '../components/SectionContainer.astro';

type Props = {
	id: CollectionEntry<'blog' | 'archive'>['id']
	data: CollectionEntry<'blog' | 'archive'>['data']
	headings: MarkdownHeading[]
}

const { data  } = Astro.props
const { title, description, pubDate, heroImage, tags } = data

const articleDate = pubDate.toISOString()
---

<MainLayout
	title={title}
	author="Pedro Rojas"
	description={description}
	version="1.0"
>

	<SectionContainer class="py-16 md:py-20">
		<article class='min-w-full md:py-4 sm:max-w-none md:max-w-none'>
			<header class='mb-3 flex flex-col justify-center items-center gap-6'>
				<div class='flex flex-col gap-2'>
					<div class='flex items-center justify-center gap-x-1'>
						<p class='text-center text-sm text-opacity-50'>
							Publicado: <FormattedDate date={pubDate} />
						</p>
					</div>
					<h1 class='text-center text-4xl md:text-6xl md:pb-2.5 font-semibold'>
						{title}
					</h1>
				</div>

				<div class='flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5'>
					{tags.map((tag) => <Tag tag={tag} />)}
				</div>
			</header>

			<>
				{
					heroImage && (
						<Image
							src={heroImage}
							width={500}
							height={300}
							quality={100}
							format='webp'
							loading='eager'
							class='rounded-md w-full max-h-[300px]  md:max-h-[500px] my-8 object-cover'
							alt={`imagen de ${title}`}
						/>
					)
				}
			</>

			<hr />

			<div>
				<slot />
			</div>
		</article>
	</SectionContainer>
	
</MainLayout>
	

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
